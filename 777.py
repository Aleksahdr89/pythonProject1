# Угадайка чисел
#
# Описание проекта:
# программа генерирует случайное число в диапазоне от 1 до 100
# и просит пользователя угадать это число.
# Если догадка пользователя больше случайного числа,
# то программа должна вывести сообщение 'Слишком много, попробуйте еще раз'.
# Если догадка меньше случайного числа,
# то программа должна вывести сообщение 'Слишком мало, попробуйте еще раз'.
# Если пользователь угадывает число,
# то программа должна поздравить его и вывести сообщение 'Вы угадали, поздравляем!'.
#
# from random import *
# number = randint(1, 100)
# number_user = bool
# print('Добро пожаловать в числовую угадайку')
# while number != number_user:
#     print('Веди число')
#     number_user = int(input())
#     if number_user > number:
#         print('Слишком много, попробуйте еще раз')
#     elif number_user < number:
#         print('Слишком мало, попробуйте еще раз')
# print('Вы угадали, поздравляем!')
#
# import random
# Заголовок программы
#
# 1) Подключите модуль random;
# 2) Сгенерируйте случайное число от 1до 100;
# Выведите текст приветствия пользователю:
# 'Добро пожаловать в числовую угадайку'.
#
# from random import *
# number = randint(1, 100)
# print('Добро пожаловать в числовую угадайку')
#
import random

#Функция проверки корректности введенных данных
#
# Напишите функцию is_valid() в которую передается один строковый аргумент.
# Функция возвращает значение True если переданный аргумент является целым числом от 1 до 100
# и False в противном случае.
#
# from random import *
# number = randint(1, 100)
# number_user = input()
# def is_valid(x):
#      if x.isdigit() and 0 < int(x) < 101:
#          return True
#      else:
#          return False
# print(is_valid(number_user))
#




# Основной цикл программы
#
# 1) Организуйте цикл, который будет запрашивать у пользователя данные =
# (цикл может быть бесконечным (while True) или может использовать сигнальную метку с последующим переключением,
# после угадывания числа);
# 2) Запросите у пользователя число от 1 до 100;
# 3) Проверьте введенные данные с помощью функции is_valid()
#
# ---если данные некорректны, выведите текст: 'А может быть все-таки введем целое число от 1 до 100?'
# и перейдите к следующей итерации основного цикла;
# ---если данные корректны, преобразуйте их к целому числу для удобства дальнейшей работы.
#


# #*****************************************************************
# q = 1 # переменная для бесконечного цыкла while
# while q != 0:
#     from random import * # вызов модуля
#     number = randint(1, 100) # генерация рандомного числа по заданному диапазону
#
#     print('Добро пожаловать в числовую угадайку.', 'Введи число от 1 до 100 включительно, чтобы угадать число которое задумал компьютер. ')
#
#     def is_valid(x): # функция на проверку коректности вводимых данных
#      if x.isdigit() and 0 < int(x) < 101:
#          return True
#      else:
#          return False
#
#     count = 0
#     while True:
#         number_user = input()
#         if is_valid(number_user):
#             number_user = int(number_user)
#             count += 1
#         else:
#             print('А может быть все-таки введем целое число от 1 до 100?')
#             continue
#         if number_user > number:
#             print('Ваше число больше загаданного, попробуйте еще разок')
#         elif number_user < number:
#             print('Ваше число меньше загаданного, попробуйте еще разок')
#         else:
#             print('Вы угадали, поздравляем!')
#             break
#     print('Спасибо, что играли в числовую угадайку. Еще увидимся...''Вы отгадали с', +count, 'попытки.')
#
#     print('играть ещё ? / да / нет') # возможность продолжить или завершить игру
#     number_user_2 = input() # переменная по которой определяется дальнейшее выполнение цикла
#
#     ## переменная для бесконечного цыкла while
#     if number_user_2 == 'да':
#         q = 1 # переменная для бесконечного цыкла while
#         print('да')
#     else:
#         q = 0 # переменная для бесконечного цыкла while
#         print('Всего доброго')
#         print('Игра завершена ')
# #****************************************************************





# #****************************************************************
# #****************************************************************

# Магический шар 8

# Подключите модуль random;
# Создайте список answers, содержащий 20 потенциальных ответов (Бесспорно, Предрешено, и т.д.).
# Выведите текстовое сообщение: 'Привет Мир, я магический шар, и я знаю ответ на любой твой вопрос.';
# Уточните как зовут пользователя;
# Выведите слова приветствия, например, 'Привет Тимур'.
# Организуйте цикл, который будет запрашивать у пользователя данные;
# Запросите у пользователя вопрос;
# Выведите случайный ответ с помощью функции choice() передав список answers в качестве аргумента;
# Уточните у пользователя, хочет ли он задать еще один вопрос, если да, то вернитесь в основной цикл программы,
# если нет выведите сообщение 'Возвращайся если возникнут вопросы!' и завершите программу.

# import random # вызов модуля
# answers = ['Бесспорно', 'Мне кажется - да', 'Пока неясно, попробуй снова', 'Даже не думай',
#  'Предрешено',	'Вероятнее всего',	'Спроси позже',	'Мой ответ - нет',
# 'Никаких сомнений',	'Хорошие перспективы',	'Лучше не рассказывать', 'По моим данным - нет',
# 'Определённо да', 'Знаки говорят - да',	'Сейчас нельзя предсказать', 'Перспективы не очень хорошие',
# 'Можешь быть уверен в этом', 'Да', 'Сконцентрируйся и спроси опять', 'Весьма сомнительно']
# name = input('Как тебя зовут ? :')
# print('Привет', name, 'я магический шар, и я знаю ответ на любой твой вопрос.')
# count = 0
# while count == 0:
#     answers_random = random.choice(answers) # генерирует случайный вывод из ранее созданного списка
#     print(input('Задай свой вопрос ! :'))
#     print(answers_random)
#     while count == 0:
#         n = (input('Ещё вопрос да ? или нет ?').lower())
#         if n == 'нет':
#             print('Возвращайся если возникнут вопросы!')
#             count += 1
#             break
#         elif n == 'да':
#             break
#         else:
#             print('Извини не понял ответа, сыграем ещё ? ')
# #****************************************************************
# #****************************************************************





# Подключите модуль random;
# Создайте строковые константы:
# Напишите функцию generate_password(), которая принимает два аргумента:
#
# length: длину пароля;
# chars: алфавит из символов которого состоит пароль;
# и возвращает пароль.
# Используя цикл for, сгенерируйте необходимое количество паролей.

# Заголовок программы
# Подключите модуль random;
# Создайте строковые константы:
# digits: 0123456789;
# lowercase_letters: abcdefghijklmnopqrstuvwxyz;
# uppercase_letters: ABCDEFGHIJKLMNOPQRSTUVWXYZ;
# punctuation: !#$%&*+-=?@^_.
# Создайте переменную chars = '', которая будет содержать все символы, которые могут быть в генерируемом пароле.


# Считывание пользовательских данных
# Программа должна запрашивать у пользователя следующую информацию:
#
# Количество паролей для генерации;
# Длину одного пароля;
# Включать ли цифры 0123456789?
# Включать ли прописные буквы ABCDEFGHIJKLMNOPQRSTUVWXYZ?
# Включать ли строчные буквы abcdefghijklmnopqrstuvwxyz?
# Включать ли символы !#$%&*+-=?@^_?
# Исключать ли неоднозначные символы il1Lo0O?


# Генерации пароля
# Напишите функцию generate_password(), которая принимает два аргумента:
#
# length: длину пароля;
# chars: алфавит из символов которого состоит пароль;
# и возвращает пароль.
#
# Используя цикл for, сгенерируйте необходимое количество паролей.

# #*******************************************

# переменные на добавления в список символов через запрос о необходимости у пользователя # Заголовок программы
digits = '0123456789'
lowercase_letters = 'abcdefghijklmnopqrstuvwxyz'
uppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
punctuation = '!#$%&*+-=?@^_'

ambiguous_characters = 'il1Lo0O' # неоднозначные символы

chars = '' #  список символов
s = '' #  переменная для перезаписи без неоднозначных символов


#************************   генерируем список символов   (chars) Считывание пользовательских данных
quantity = int(input('Количество паролей для генерации : '))
# print(quantity)
length = int(input('Длину одного пароля : ')) #
# print(long)

numbers = (input('Включать ли цифры  ? да или нет : ').lower()) #
if numbers == 'да':
    chars += digits
    print('цифры будут включены в пароль')
small_letter = (input('Включать ли строчные буквы ? да или нет : ').lower()) #

if small_letter == 'да':
    chars += lowercase_letters
    print('строчные буквы будут включены в пароль')
big_letter = (input('Включать ли прописные буквы ? да или нет : ').lower()) #

if big_letter == 'да':
    chars += uppercase_letters
    print('прописные буквы будут включены в пароль')
symbol = (input('Включать ли символы ? да или нет : ').lower()) #

if symbol == 'да':
    chars += punctuation
    print('символы будут включены в пароль')

symbol_ambiguous = (input('Исключать ли неоднозначные символы ? да или нет : ').lower()) #
if symbol_ambiguous == 'да':
    for i in range(len(chars)):
        if not chars[i] in ambiguous_characters:
            s += chars[i]
    chars = s # перезаписали список символов , без неоднозначных символов .
print('неоднозначные символы будут исключены из пароля')

#************************   сгенерировали список символов (chars)

import random # вызов модуля

def generate(): # функция по созданию пароля # Генерации пароля
    password = ''
    for _ in range(length):
        password += random.choice(chars) # выводит случайный элемент из строки и добовляет его в переменную
    return password


for _ in range(quantity): # вызов функции нужно количество паролей # вывод паролей
    print()
    print(generate())

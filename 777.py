# ПРОГРАММА УГАДАЙКА ЧИСЕЛ
#
# Описание проекта:
# программа генерирует случайное число в диапазоне от 1 до 100
# и просит пользователя угадать это число.
# Если догадка пользователя больше случайного числа,
# то программа должна вывести сообщение 'Слишком много, попробуйте еще раз'.
# Если догадка меньше случайного числа,
# то программа должна вывести сообщение 'Слишком мало, попробуйте еще раз'.
# Если пользователь угадывает число,
# то программа должна поздравить его и вывести сообщение 'Вы угадали, поздравляем!'.
#
# from random import *
# number = randint(1, 100)
# number_user = bool
# print('Добро пожаловать в числовую угадайку')
# while number != number_user:
#     print('Веди число')
#     number_user = int(input())
#     if number_user > number:
#         print('Слишком много, попробуйте еще раз')
#     elif number_user < number:
#         print('Слишком мало, попробуйте еще раз')
# print('Вы угадали, поздравляем!')
#
# import random
# Заголовок программы
#
# 1) Подключите модуль random;
# 2) Сгенерируйте случайное число от 1до 100;
# Выведите текст приветствия пользователю:
# 'Добро пожаловать в числовую угадайку'.
#
# from random import *
# number = randint(1, 100)
# print('Добро пожаловать в числовую угадайку')
#
# import random

# Функция проверки корректности введенных данных
#
# Напишите функцию is_valid() в которую передается один строковый аргумент.
# Функция возвращает значение True если переданный аргумент является целым числом от 1 до 100
# и False в противном случае.
#
# from random import *
# number = randint(1, 100)
# number_user = input()
# def is_valid(x):
#      if x.isdigit() and 0 < int(x) < 101:
#          return True
#      else:
#          return False
# print(is_valid(number_user))
#


# Основной цикл программы

# 1) Организуйте цикл, который будет запрашивать у пользователя данные =
# (цикл может быть бесконечным (while True) или может использовать сигнальную метку с последующим переключением,
# после угадывания числа);
# 2) Запросите у пользователя число от 1 до 100;
# 3) Проверьте введенные данные с помощью функции is_valid()
#
# ---если данные некорректны, выведите текст: 'А может быть все-таки введем целое число от 1 до 100?'
# и перейдите к следующей итерации основного цикла;
# ---если данные корректны, преобразуйте их к целому числу для удобства дальнейшей работы.
#


# #*****************************************************************
# q = 1 # переменная для бесконечного цыкла while
# while q != 0:
#     from random import * # вызов модуля
#     number = randint(1, 100) # генерация рандомного числа по заданному диапазону
#
#     print('Добро пожаловать в числовую угадайку.', 'Введи число от 1 до 100 включительно, чтобы угадать число которое задумал компьютер. ')
#
#     def is_valid(x): # функция на проверку коректности вводимых данных
#      if x.isdigit() and 0 < int(x) < 101:
#          return True
#      else:
#          return False
#
#     count = 0
#     while True:
#         number_user = input()
#         if is_valid(number_user):
#             number_user = int(number_user)
#             count += 1
#         else:
#             print('А может быть все-таки введем целое число от 1 до 100?')
#             continue
#         if number_user > number:
#             print('Ваше число больше загаданного, попробуйте еще разок')
#         elif number_user < number:
#             print('Ваше число меньше загаданного, попробуйте еще разок')
#         else:
#             print('Вы угадали, поздравляем!')
#             break
#     print('Спасибо, что играли в числовую угадайку. Еще увидимся...''Вы отгадали с', +count, 'попытки.')
#
#     print('играть ещё ? / да / нет') # возможность продолжить или завершить игру
#     number_user_2 = input() # переменная по которой определяется дальнейшее выполнение цикла
#
#     ## переменная для бесконечного цыкла while
#     if number_user_2 == 'да':
#         q = 1 # переменная для бесконечного цыкла while
#         print('да')
#     else:
#         q = 0 # переменная для бесконечного цыкла while
#         print('Всего доброго')
#         print('Игра завершена ')
# #****************************************************************


# #****************************************************************
# #****************************************************************

# ПРОГРАММА МАГИЧЕСКИЙ ШАР 8

# Подключите модуль random;
# Создайте список answers, содержащий 20 потенциальных ответов (Бесспорно, Предрешено, и т.д.).
# Выведите текстовое сообщение: 'Привет Мир, я магический шар, и я знаю ответ на любой твой вопрос.';
# Уточните как зовут пользователя;
# Выведите слова приветствия, например, 'Привет Тимур'.
# Организуйте цикл, который будет запрашивать у пользователя данные;
# Запросите у пользователя вопрос;
# Выведите случайный ответ с помощью функции choice() передав список answers в качестве аргумента;
# Уточните у пользователя, хочет ли он задать еще один вопрос, если да, то вернитесь в основной цикл программы,
# если нет выведите сообщение 'Возвращайся если возникнут вопросы!' и завершите программу.

# import random # вызов модуля
# answers = ['Бесспорно', 'Мне кажется - да', 'Пока неясно, попробуй снова', 'Даже не думай',
#  'Предрешено',	'Вероятнее всего',	'Спроси позже',	'Мой ответ - нет',
# 'Никаких сомнений',	'Хорошие перспективы',	'Лучше не рассказывать', 'По моим данным - нет',
# 'Определённо да', 'Знаки говорят - да',	'Сейчас нельзя предсказать', 'Перспективы не очень хорошие',
# 'Можешь быть уверен в этом', 'Да', 'Сконцентрируйся и спроси опять', 'Весьма сомнительно']
# name = input('Как тебя зовут ? :')
# print('Привет', name, 'я магический шар, и я знаю ответ на любой твой вопрос.')
# count = 0
# while count == 0:
#     answers_random = random.choice(answers) # генерирует случайный вывод из ранее созданного списка
#     print(input('Задай свой вопрос ! :'))
#     print(answers_random)
#     while count == 0:
#         n = (input('Ещё вопрос да ? или нет ?').lower())
#         if n == 'нет':
#             print('Возвращайся если возникнут вопросы!')
#             count += 1
#             break
#         elif n == 'да':
#             break
#         else:
#             print('Извини не понял ответа, сыграем ещё ? ')
# #****************************************************************
# #****************************************************************


# #****************************************************************
# #****************************************************************

#  ПРОГРАММА ГЕНЕРАТОР БЕЗОПАСНЫХ ПАРОЛЕЙ

# Подключите модуль random;
# Создайте строковые константы:
# Напишите функцию generate_password(), которая принимает два аргумента:
#
# length: длину пароля;
# chars: алфавит из символов которого состоит пароль;
# и возвращает пароль.
# Используя цикл for, сгенерируйте необходимое количество паролей.

# Заголовок программы
# Подключите модуль random;
# Создайте строковые константы:
# digits: 0123456789;
# lowercase_letters: abcdefghijklmnopqrstuvwxyz;
# uppercase_letters: ABCDEFGHIJKLMNOPQRSTUVWXYZ;
# punctuation: !#$%&*+-=?@^_.
# Создайте переменную chars = '', которая будет содержать все символы, которые могут быть в генерируемом пароле.


# Считывание пользовательских данных
# Программа должна запрашивать у пользователя следующую информацию:
#
# Количество паролей для генерации;
# Длину одного пароля;
# Включать ли цифры 0123456789?
# Включать ли прописные буквы ABCDEFGHIJKLMNOPQRSTUVWXYZ?
# Включать ли строчные буквы abcdefghijklmnopqrstuvwxyz?
# Включать ли символы !#$%&*+-=?@^_?
# Исключать ли неоднозначные символы il1Lo0O?


# Генерации пароля
# Напишите функцию generate_password(), которая принимает два аргумента:
#
# length: длину пароля;
# chars: алфавит из символов которого состоит пароль;
# и возвращает пароль.
#
# Используя цикл for, сгенерируйте необходимое количество паролей.

# #*******************************************

# # переменные на добавления в список символов через запрос о необходимости у пользователя # Заголовок программы
# digits = '0123456789'
# lowercase_letters = 'abcdefghijklmnopqrstuvwxyz'
# uppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
# punctuation = '!#$%&*+-=?@^_'
#
# ambiguous_characters = 'il1Lo0O' # неоднозначные символы
#
# chars = '' #  список символов
# s = '' #  переменная для перезаписи без неоднозначных символов
#
#
# #************************   генерируем список символов   (chars) Считывание пользовательских данных
# quantity = input('Количество паролей для генерации : ')
# if quantity.isdigit():
#     print('необходимое количество паролей зафиксировано', quantity)
# else:
#     print('Количество паролей для генерации, должно быть цыфрой')
#     quantity = input('Введите количество паролей для генерации в цыфрах : ')
# # print(quantity)
# length = input('Длину одного пароля : ') #
# if quantity.isdigit():
#     print('необходимая длинна одного пароля зафиксирована', length, 'символов')
# else:
#     print('длинна одного пароля для генерации, должна быть цыфрой')
#     length = input('Введите длину одного пароля : ')
# # print(long)
#
# numbers = (input('Включать ли цифры  ? да или нет : ').lower()) #
# if numbers == 'да':
#     chars += digits
#     print('цифры будут включены в пароль')
# else:
#     print('цифры НЕ будут включены в пароль')
#
# small_letter = (input('Включать ли строчные буквы ? да или нет : ').lower()) #
# if small_letter == 'да':
#     chars += lowercase_letters
#     print('строчные буквы будут включены в пароль')
# else:
#     print('строчные буквы НЕ будут включены в пароль')
#
# big_letter = (input('Включать ли прописные буквы ? да или нет : ').lower()) #
# if big_letter == 'да':
#     chars += uppercase_letters
#     print('прописные буквы будут включены в пароль')
# else:
#     print('прописные буквы НЕ будут включены в пароль')
#
# symbol = (input('Включать ли символы ? да или нет : ').lower()) #
# if symbol == 'да':
#     chars += punctuation
#     print('символы будут включены в пароль')
# else:
#     print('символы НЕ будут включены в пароль')
#
# symbol_ambiguous = (input('Исключать ли неоднозначные символы ? да или нет : ').lower()) #
# if symbol_ambiguous == 'да':
#     for i in range(len(chars)):
#         if not chars[i] in ambiguous_characters:
#             s += chars[i]
#     chars = s # перезаписали список символов , без неоднозначных символов .
#     print('неоднозначные символы будут исключены из пароля')
# if symbol_ambiguous != 'да':
#     print('неоднозначные символы НЕ будут исключены из пароля')
# #************************   сгенерировали список символов (chars)
#
# import random # вызов модуля
#
# def generate(): # функция по созданию пароля # Генерации пароля
#     password = ''
#     for _ in range(int(length)):
#         password += random.choice(chars) # выводит случайный элемент из строки и добовляет его в переменную
#     return password
#
#
# for _ in range(int(quantity)): # вызов функции нужно количество паролей # вывод паролей
#     print()
#     print(generate())
# #****************************************************************
# #****************************************************************


# #****************************************************************
# #***************************************************************
# ШИФР ЦЕЗАРЯ
# Описание проекта: требуется написать программу,
# способную шифровать и дешифровать текст в соответствии с алгоритмом Цезаря.
# Она должна запрашивать у пользователя следующие данные:
#
# направление: шифрование или дешифрование;
# язык алфавита: русский или английский;
# шаг сдвига (со сдвигом вправо).
# Примечание 1. Считайте, что в русском языке 32 буквы (буква ё отсутствует).
# Примечание 2. Неалфавитные символы — знаки препинания, пробелы, цифры — не меняются.
# Примечание 3. Сохраните регистр символов. Например, текст: "Умом Россию не понять"
# при сдвиге на одну позицию вправо будет преобразован в: "Фнпн Спттйя ож рпоауэ".


# ru = 'абвгдежзийклмнопрстуфхцчшщъыьэюяабвгдежзийклмнопрстуфхцчшщъыьэюя'
# RU = 'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ'
# EN = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'
# en = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'
#
#
# direction = input('ш or дш ? ') # шифрование или дешифрование;
# language = input('ру or ен ? ') # язык
#
# step = int(input('Введи число от 0 до 32 , на которое нужно сдвинуть текст ')) # шаг сдвига он же ключ для дешифрования
#
# text = input('Введите текст который нужно зашифровать' )
# y = ''
# x = ''
#
# if direction == 'ш' and language == 'ру' and 0 < step < 32:
#     for i in range(len(text)):
#         for q in range(len(ru)):
#             if text[i].isalpha(): # с функцией для проверки текста на состав
#                 # (правда если число состоит только из буквенных символов)
#                 if text[i] == ru[q]:
#                     y += ru[q + step]
#                     break
#                 elif text[i] == RU[q]:
#                     y += ' ' + RU[q + step]
#                     break
#             else:
#                 y += text[i]
#                 break
# elif direction != 'ш' and language != 'ру' and 0 > step or step > 32:
#     print('Введенны некоректные данные, повторите запрос')
# print(y.lstrip()) # вывод c применениев функции по убиранию пробела в начале текста
#
#
# # Верхний код шифрование ру
# # НИЖНИК КОД ДЕШИФРОВАНИЕ ру
#
# if direction == 'дш' and language == 'ру' and 0 < step < 32:
#     for i in range(len(text)):
#         for q in range(len(ru)):
#             if text[i].isalpha():  # с функцией для проверки текста на состав
#             # (правда если число состоит только из буквенных символов)
#                 if text[i] == ru[q]:
#                     x += ru[q - step]
#                     break
#                 elif text[i] == RU[q]:
#                     x += ' ' + RU[q - step]
#                     break
#             else:
#                 x += text[i]
#                 break
#     print(x.lstrip())
#
# #==========================================================================
#
# if direction == 'ш' and language == 'ен' and 0 < step < 26:
#     for i in range(len(text)):
#         for q in range(len(en)):
#             if text[i].isalpha(): # с функцией для проверки текста на состав
#                 # (правда если число состоит только из буквенных символов)
#                 if text[i] == en[q]:
#                     y += en[q + step]
#                     break
#                 elif text[i] == EN[q]:
#                     y += ' ' + EN[q + step]
#                     break
#             else:
#                 y += text[i]
#                 break
# elif direction != 'ш' and language != 'ру' and 0 > step or step > 32:
#     print('Введенны некоректные данные, повторите запрос')
# print(y.lstrip()) # вывод c применениев функции по убиранию пробела в начале текста
#
# # Верхний код шифрование ен
# # НИЖНИК КОД ДЕШИФРОВАНИЕ ен
#
# if direction == 'дш' and language == 'ен' and 0 < step < 26:
#     for i in range(len(text)):
#         for q in range(len(en)):
#             if text[i].isalpha():  # с функцией для проверки текста на состав
#             # (правда если число состоит только из буквенных символов)
#                 if text[i] == en[q]:
#                     x += en[q - step]
#                     break
#                 elif text[i] == EN[q]:
#                     x += ' ' + EN[q - step]
#                     break
#             else:
#                 x += text[i]
#                 break
#     print(x.lstrip())
#
#
#
# #==============================================================
# #==============================================================
# #==============================================================
# На вход программе подается строка текста на английском языке,
# в которой нужно зашифровать все слова.
# Каждое слово строки следует зашифровать с помощью шифра Цезаря
# (циклического сдвига на длину этого слова).
# Строчные буквы при этом остаются строчными,
# а прописные – прописными. Гарантируется,
# что между различными словами присутствует один пробел.
# EN = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'
# en = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'
# s = input()
# s1 = s.split()
# x = ''
# t = ''
# b = [] # длина здвига
# for i in range(len(s)):
#     if s[i].isalpha():
#         x += 'a'
#     else:
#         x += ' '
# y = x.split() # СОЛИЧЕСТВО КАЖДОГО СЛОВА
# for i in range(len(y)):
#     c = len(y[i])
#     b.append(c)
#
# for i in range(len(s1)): # КОЛИЧЕСТВО СЛОВ В СПИСКЕ
#     c = s1[i] + ' '
#     p = b[i] # длина слова
#     for r in range(len(c)):
#         for q in range(len(en)): # КОЛИЧЕСТВО АЛФАВИТА
#             if c[r].isalpha():
#                 if en[q] == c[r]:
#                     t += en[q + p]
#                     break
#                 elif EN[q] == c[r]:
#                     t += EN[q + p]
#                     break
#             else:
#                 t += c[r]
#                 break
# print(t)
# #=============================================================
# #=============================================================
# #=============================================================


# Калькулятор систем счисления ? ПЕРЕВОДА ЧИСЛА В ДЕСЯТИЧНУЮ СИСТЕМУ СЧЕСЛЕНИЯ
# s_1 = input('Для перевода в десятичную систему счисления,введите числа через пробел! : ')
# q = int(input('Из какой системы счисления нужно перевести ? :  '))
#
# s_2 = s_1.split()
# s = []
# for i in range(len(s_2)):
#     s.append(int(s_2[i]))
# s.reverse()
# #     88 32 22 16 17
# x = 0
# for i in range(len(s)):
#      x += s[i]*q**i
# print(x)


# #=============================================================
# #=============================================================
# #=============================================================
# x = int(input()) # На вход программе подается натуральное число в десятичной системе счисления.
#
# x_2 = bin(x) # переводит число в двоичную
# print(int(x_2[2::])) # выводит число (без приставки)
#
# x_1 = oct(x) # переводит число в восьмеричную
# print(int(x_1[2::])) # выводит число (без приставки)
#
# x_3 = hex(x) # переводит число в шестнадцатеричную
# print(x_3[2::].upper()) # выводит число (без приставки) в ВЕРХНЕМ регистре
# #=============================================================
# #=============================================================
# #=============================================================


# Угадайка слов


# Заголовок программы
# Подключите модуль random;
# Создайте глобальный список word_list,
# содержащий слова, которые будут использоваться в игре.
# name = input('Привет, как тебя зовут ?  Вод : ')
# print('Будем знакомы', name, 'меня называют угадайка слов :)')
# user_2 = input('ты готов-ва сыграть ?  Вод : ').upper()
# while user_2 != 'НЕТ':
#     import random
#
#     word_list = ['Авокадо', 'Артишок', 'Баклажан', 'Батат', 'Брокколи', 'Брюква',
#                  'Горох', 'Дайкон', 'Кабачок', 'Каперсы', 'Капуста', 'Картофель',
#                  'Кукуруза', 'Лук', 'Морковь', 'Огурец', 'Патиссон',
#                  'Перец', 'Редис', 'Редька', 'Репа', 'Свекла', 'Сельдерей',
#                  'Спаржа', 'Помидор', 'Тыква', 'Фасоль', 'Хрен', 'Цуккини',
#                  'Чеснок']
#
#
#     #  случайное слово из списка word_list в верхнем регистре.
#     def get_word():
#         word = random.randint(0, len(word_list))
#         return word_list[word].upper()
#
#
#     #  случайное слово из списка word_list в верхнем регистре.
#
#     q = get_word()
#
#     u = q[0]
#
#     tries = 0
#
#
#     # функция получения текущего состояния
#     def display_hangman(tries):
#         stages = [
#             '''
#
#
#                              O
#                             \\|/
#                              |
#                             / \\
#
#                        ''',
#             '''
#
#
#                              O
#                             \\|/
#                              |
#                             /
#             Я не хотел бы больше терять свои части как Джавани
#             по этому лови подсказку, загаданное слово является овощем !
#             И начинается на букву ''' + q[0],
#
#             '''
#
#
#                              O
#                             \\|/
#                              |
#
#
#                     ''',
#             '''
#
#
#                              O
#                             \\|
#                              |
#
#
#
#                     ''',
#             '''
#
#
#                              O
#                              |
#                              |
#
#
#                     ''',
#             '''
#
#
#                              O
#                              |
#
#
#
#                     ''',
#             '''
#
#
#                              O
#
#
#
#
#                     ''',
#             '''
#
#
#                       УВЫ ИГРА ОКОНЧИНА
#                     если хочеш сыграть ещё отправь да
#                     или нет для завершения игры.
#
#
#
#
#                     ''',
#         ]
#         return stages[tries]
#
#
#     # функция получения текущего состояния
#
#     y = display_hangman(tries)
#
#     print('Добро пожаловать в угадайку слов!, меня сделал Саша и Настя')
#     print('Загаданное мной слово состоит из', ('_ ' * len(q)), len(q),
#           'букв')  # строка, содержащая символы _ на каждую букву задуманного слова
#     print('Ты можешь допустить всего 7 не правельных ответов')
#     # word_completion = ''
#     d = []
#     f = '_ ' * len(q)
#     f = f.split()
#
#
#     def play():
#         print(y)
#         print(*f)
#
#
#     print(play())
#
#     guessed_letters = [' ']  # список уже названных букв
#     guessed = False  # сигнальная метка
#     count = 0
#     # while guessed != True:
#     while tries != 7:
#         user = input('Введи букву : ')
#         user = user.upper()
#         # print(q)
#         x = q.split
#         print(q)
#
#         if user in guessed_letters:
#             print('уже было')
#             continue
#         elif user in q:
#             print('Отлично, такая буква есть')
#             for i in range(len(q)):
#                 if user == q[i]:
#                     del f[i]
#                     f.insert(i, user)
#         else:
#             # убираем части человечка
#             print('Такой буквы нет в загаданом слове')
#             tries += 1
#             y = display_hangman(tries)
#         play()
#         # убираем части человечка
#
#         guessed_letters.append(user)  # список уже названных букв
#
#     user_2 = input('Вод : ').upper()
#
# print('Всего доброго')



# # Индекс массы тела
# Напишите программу для вычисления и оценки индекса массы тела человека.
# По формулу рост умножить на рост, делить на вес. Диапазон 18.5 - 25.0
# print('Для коректного результата вводи число с точкой например вес 63.0 рост 1.72')
# x = float(input('Введите вес : '))
# k = float(input('Введите рост : '))
# q = x / (k*k)
# print(q)
# if 18.5 <= q and q <= 25.0:
#     print('Оптимальная масса')
# elif q < 18.5:
#     print('Недостаточная масса')
# elif q > 25:
#     print('Избыточная масса')



#*************************************************

#Китайский гороскоп
# # Китайский гороскоп назначает животным годы в 12-летнем цикле. Один 12-летний цикл показан в таблице ниже.
# # Таким образом, 2012 год будет очередным годом дракона.
# #g = ['Дракон', 'Змея', 'Лошадь', 'Овца', 'Обезьяна', 'Петух', 'Собака', 'Свинья', 'Крыса', 'Бык', 'Тигр', 'Заяц']
# g = ['Петух','Собака', 'Свинья', 'Крыса', 'Бык', 'Тигр', 'Заяц', 'Дракон', 'Змея', 'Лошадь', 'Овца', 'Обезьяна']
# t = int(input())
# x = t // 12 * 12
# p = (t - x)
# print(g[p-1])

# #*************************************************
#
#
# # Задача Иосифа Флавия 🌶️🌶️
# #
# #
# #
# n = int(input()) # количество в списке
# k = int(input()) # те позиции которые нужно убрать
# s = []
#
# for i in range(n): # от 1 до n включително
#     w = i+1 # обозначение номером
#     s.append(w) # запись в список s под номером
#
#
# while len(s) > 1:
#     for q in range(0, k -1):
#         s.append(s[q])
#         # print(s, 'перенесли')
#         # print()
#     del s[0:k]
#     # print('удалили, то что перенесли и следующию "ту какоторую нужно убрать",  осталось  ', s, ' * ')
#     # print()
# print(*s)
#
#
#
# #*************************************************
# #*************************************************
#
#
#
#
#
#Координатные четверти
#
# Дан набор точек на координатной плоскости.
# Необходимо подсчитать и вывести количество точек,
# лежащих в каждой координатной четверти.
# В первой строке записано количество точек.
# Каждая следующая строка состоит из двух целых чисел — координат точки
# (сначала абсцисса – x, затем ордината – y), разделенных символом пробела.
# Примечание. Учтите, что точки, лежащие на осях координат,
# не принято относить к какой-либо координатной четверти.
#
#
#
#
# point = int(input()) # количество точек
#
# clean = ''
# for _ in range(point):
#     clean += input()+' ' # (сначала абсцисса – x, затем ордината – y),
# # разделенных символом пробела.
# # print(clean)
#
# s = clean.split()
# # print(s)
#
# x = s[::2]
# y = s[1::2]
# # print(x)
# # print(y)
#
# quarter1 = 0
# quarter2 = 0
# quarter3 = 0
# quarter4 = 0
#
#
# for i in range(point):
#     if int(x[i]) > 0 and int(y[i]) > 0:
#         quarter1 += 1
#     elif int(x[i]) < 0 and int(y[i]) > 0:
#         quarter2 += 1
#     elif int(x[i]) < 0 and int(y[i]) < 0:
#         quarter3 += 1
#     elif int(x[i]) > 0 and int(y[i]) < 0:
#         quarter4 += 1
#
# print('Первая четверть:', quarter1)
# print('Вторая четверть:', quarter2)
# print('Третья четверть:', quarter3)
# print('Четвертая четверть:', quarter4)
#
#
#
#
# # #*************************************************
# # #*************************************************

# shcaf_1 = dimer_1




# ВАРИАНТ 1
# # Аптимизация поиска нужного номера в блоках-стойках с номерами-автоматами.
# all_dimer_numbers = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 402, 405,
#      408, 411, 414, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74,
#      77, 80, 403, 406, 409, 411, 414, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63,
#      54, 69, 72, 75, 78, 401, 404, 407, 410, 413, 416, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120,
#      123, 126, 129, 132, 135, 138, 141, 144, 147, 150, 153, 156, 159, 418, 421, 424, 427, 430, 82, 85, 88, 91, 94, 97,
#      100, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 419, 422,
#      425, 428, 431, 83, 86, 89, 92, 95, 98, 101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143,
#      146, 149, 152, 155, 158, 417, 420, 423, 426, 429, 432, 161, 164, 167, 170, 173, 176, 179, 182, 185, 188, 191, 194,
#      197, 200, 203, 206, 209, 212, 215, 218, 221, 224, 227, 230, 233, 236, 239, 434, 437, 440, 443, 446, 162, 165, 168,
#      171, 174, 177, 180, 183, 186, 189, 192, 195, 198, 201, 204, 207, 201, 213, 216, 219, 222, 225, 228, 231, 234, 237,
#      240, 435, 438, 441, 444, 447, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 211,
#      214, 217, 220, 223, 226, 229, 232, 235, 238, 433, 436, 439, 442, 445, 448, 141, 244, 247, 250, 253, 256, 259, 262,
#      265, 268, 271, 274, 277, 280, 283, 286, 289, 292, 295, 298, 301, 304, 307, 310, 313, 316, 319, 450, 453, 456, 459,
#      462, 242, 245, 248, 251, 254, 257, 260,  263, 266, 269, 272, 275, 278, 281, 284, 287, 290, 293, 296, 299, 302, 305,
#      308, 311, 314, 317, 320, 451, 454, 457, 460, 463, 243, 246, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276, 279,
#      282, 285, 288, 291, 194, 297, 300, 303, 306, 309, 312, 315, 318, 449, 452, 455, 458, 461, 464, 321, 324, 327, 330,
#      333, 336, 339, 342, 345, 348, 351, 354, 357, 360, 363, 366, 369, 372, 375, 378, 381, 384, 387, 390, 393, 396, 399,
#      466, 469, 472, 475, 478, 322, 325, 328, 331, 334, 337, 340, 343, 346, 349, 352, 355, 358, 361, 364, 367, 370, 373,
#      376, 379, 382, 385, 388, 391, 394, 397, 400, 467, 470, 473, 476, 479, 323, 326, 329, 332, 335, 338, 341, 344, 347,
#      350, 353, 356, 359, 362, 365, 368, 371, 374, 377, 380, 383, 386, 389, 392, 395, 398, 465, 468, 471, 474, 477, 480]
#
#
#
# Sensor1_1 = (1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79,
#              402, 405, 408, 411, 414, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47)
#
# Sensor1_2 = (50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 403, 406, 409, 411, 414, 3, 6, 9, 12, 15, 18, 21, 24,
#              27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 54, 69, 72, 75, 78, 401, 404, 407, 410, 413, 416)
#
# Sensor2_1 = (81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144,
#              147, 150, 153, 156, 159, 418, 421, 424, 427, 430, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115,
#              118, 121, 124, 127)
#
# Sensor2_2 = (130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 419, 422, 425, 428, 431, 83, 86, 89, 92, 95, 98,
#              101, 104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 417,
#              420, 423, 426, 429, 432)
#
# Sensor3_1 = (161, 164, 167, 170, 173, 176, 179, 182, 185, 188, 191, 194, 197, 200, 203, 206, 209, 212, 215, 218, 221,
#              224, 227, 230, 233, 236, 239, 434, 437, 440, 443, 446, 162, 165, 168, 171, 174, 177, 180, 183, 186, 189,
#              192, 195, 198, 201, 204, 207)
#
# Sensor3_2 = (201, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240, 435, 438, 441, 444, 447, 163, 166, 169, 172, 175,
#              178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238,
#              433, 436, 439, 442, 445, 448)
#
# Sensor4_1 = (141, 244, 247, 250, 253, 256, 259, 262, 265, 268, 271, 274, 277, 280, 283, 286, 289, 292, 295, 298, 301,
#              304, 307, 310, 313, 316, 319, 450, 453, 456, 459, 462, 242, 245, 248, 251, 254, 257, 260,  263, 266, 269,
#              272, 275, 278, 281, 284, 287)
#
# Sensor4_2 = (290, 293, 296, 299, 302, 305, 308, 311, 314, 317, 320, 451, 454, 457, 460, 463, 243, 246, 249, 252, 255,
#              258, 261, 264, 267, 270, 273, 276, 279, 282, 285, 288, 291, 194, 297, 300, 303, 306, 309, 312, 315, 318,
#              449, 452, 455, 458, 461, 464)
#
# Sensor5_1 = (321, 324, 327, 330, 333, 336, 339, 342, 345, 348, 351, 354, 357, 360, 363, 366, 369, 372, 375, 378, 381,
#              384, 387, 390, 393, 396, 399, 466, 469, 472, 475, 478, 322, 325, 328, 331, 334, 337, 340, 343, 346, 349,
#              352, 355, 358, 361, 364, 367)
#
# Sensor5_2 = (370, 373, 376, 379, 382, 385, 388, 391, 394, 397, 400, 467, 470, 473, 476, 479, 323, 326, 329, 332, 335,
#              338, 341, 344, 347, 350, 353, 356, 359, 362, 365, 368, 371, 374, 377, 380, 383, 386, 389, 392, 395, 398,
#              465, 468, 471, 474, 477, 480)
#
#
# # проверка на повторение каналов(создания списка с дубликатов)
# duplicate = []
# for i in range(len(all_dimer_numbers)):
#     x = all_dimer_numbers[0]
#     del all_dimer_numbers[0]
#     for h in range(len(all_dimer_numbers)):
#         if x == all_dimer_numbers[h]:
#             duplicate.append(all_dimer_numbers[h])
# #
#
#
# # 1) Проверка введённого димерного номера на наличия его в списке дубликатов.
# # 2) Вывод локации введённого димерного номера.
# dimer_number = int(input('Ввод номера : '))
#
# if dimer_number in duplicate:
#     if dimer_number == 411:
#         print()
#         print('Sensor1_1 или ШКАФ №1 ВЕРХНЯЯ ЧАТЬ, считай сверху в низ, автомат № 31')
#         print('внимание ! есть ПОВТОР автомата-номера')
#         print('Sensor1_2 или ШКАФ №1 НИЖНЯЯ ЧАТЬ, считай сверху в низ, автомат № 15')
#     elif dimer_number == 414:
#         print()
#         print('Sensor1_1 или ШКАФ №1 ВЕРХНЯЯ ЧАТЬ, считай сверху в низ, автомат № 32')
#         print('внимание ! есть ПОВТОР автомата-номера')
#         print('Sensor1_2 или ШКАФ №1 НИЖНЯЯ ЧАТЬ, считай сверху в низ, автомат № 16')
#     elif dimer_number == 54:
#         print()
#         print('Sensor1_2 или ШКАФ №1 НИЖНЯЯ ЧАТЬ, считай сверху в низ, автомат № 34')
#         print('внимание ! есть ПОВТОР автомата-номера')
#         print('Sensor1_2 или ШКАФ №1 НИЖНЯЯ ЧАТЬ, считай сверху в низ, автомат № 38')
#     elif dimer_number == 141:
#         print()
#         print('Sensor2_1 или ШКАФ №2 ВЕРХНЯЯ ЧАТЬ, считай сверху в низ, автомат № 21')
#         print('внимание ! есть ПОВТОР автомата-номера')
#         print('Sensor4_1 или ШКАФ №4 ВЕРХНЯЯ ЧАТЬ, считай сверху в низ, автомат № 1')
#     elif dimer_number == 194:
#         print()
#         print('Sensor3_1 или ШКАФ №3 ВЕРХНЯЯ ЧАТЬ, считай сверху в низ, автомат № 12')
#         print('внимание ! есть ПОВТОР автомата-номера')
#         print('Sensor4_2 или ШКАФ №4 НИЖНЯЯ ЧАТЬ, считай сверху в низ, автомат № 34')
#     elif dimer_number == 201:
#         print()
#         print('Sensor3_1 или ШКАФ №3 ВЕРХНЯЯ ЧАТЬ, считай сверху в низ, автомат № 46')
#         print('внимание ! есть ПОВТОР автомата-номера')
#         print('Sensor3_2 или ШКАФ №3 НИЖНЯЯ ЧАТЬ, считай сверху в низ, автомат № 1')
# elif dimer_number not in duplicate:
#     if dimer_number in Sensor1_1:
#         for i in range(len(Sensor1_1)):
#             if Sensor1_1[i] == dimer_number:
#                 print('Sensor1_1 или ШКАФ №1 его ВЕРХНЯЯ ЧАТЬ, считай сверху в низ, автомат №', i + 1)
#     elif dimer_number in Sensor1_2:
#         for i in range(len(Sensor1_2)):
#             if Sensor1_2[i] == dimer_number:
#                 print('Sensor1_2 или ШКАФ №1 его НИЖНЯЯ ЧАТЬ, считай сверху в низ, автомат №', i + 1)
#                 break
#     elif dimer_number in Sensor2_1:
#         for i in range(len(Sensor2_1)):
#             if Sensor2_1[i] == dimer_number:
#                 print('Sensor2_1 или ШКАФ №2 его ВЕРХНЯЯ ЧАТЬ, считай сверху в низ, автомат №', i + 1)
#                 break
#     elif dimer_number in Sensor2_2:
#         for i in range(len(Sensor2_2)):
#             if Sensor2_2[i] == dimer_number:
#                 print('Sensor2_2 или ШКАФ №2 его НИЖНЯЯ ЧАТЬ, считай сверху в низ, автомат №', i + 1)
#                 break
#     elif dimer_number in Sensor3_1:
#         for i in range(len(Sensor3_1)):
#             if Sensor3_1[i] == dimer_number:
#                 print('Sensor3_1 или ШКАФ №3 ВЕРХНЯЯ ЧАТЬ, считай сверху в низ, автомат №', i + 1)
#                 break
#     elif dimer_number in Sensor3_2:
#         for i in range(len(Sensor3_2)):
#             if Sensor3_2[i] == dimer_number:
#                 print('Sensor3_2 или ШКАФ №3 НИЖНЯЯ ЧАТЬ, считай сверху в низ, автомат №', i + 1)
#                 break
#     elif dimer_number in Sensor4_1:
#         for i in range(len(Sensor4_1)):
#             if Sensor4_1[i] == dimer_number:
#                 print('Sensor4_1 или ШКАФ №4 ВЕРХНЯЯ ЧАТЬ, считай сверху в низ, автомат №', i + 1)
#                 break
#     elif dimer_number in Sensor4_2:
#         for i in range(len(Sensor4_2)):
#             if Sensor4_2[i] == dimer_number:
#                 print('Sensor4_2 или ШКАФ №4 НИЖНЯЯ ЧАТЬ, считай сверху в низ, автомат №', i + 1)
#                 break
#     elif dimer_number in Sensor5_1:
#         for i in range(len(Sensor5_1)):
#             if Sensor5_1[i] == dimer_number:
#                 print('Sensor5_1 или ШКАФ №5 ВЕРХНЯЯ ЧАТЬ, считай сверху в низ, автомат №', i + 1)
#                 break
#     elif dimer_number in Sensor5_2:
#         for i in range(len(Sensor5_2)):
#             if Sensor5_2[i] == dimer_number:
#                 print('Sensor5_2 или ШКАФ №5 НИЖНЯЯ ЧАТЬ, считай сверху в низ, автомат №', i + 1)
#                 break
#     else:
#         print('Этот номер не является димерный каналам или его нет в этой программе')
#

# # ВАРИАНТ 2
# # # Аптимизация поиска нужного номера в блоках-стойках с номерами-автоматами.
# # ДАННЫЕ
Sensor = ([1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 402,
           405, 408, 411, 414, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47],
          [50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 403, 406, 409, 411, 414, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30,
              33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 54, 69, 72, 75, 78, 401, 404, 407, 410, 413, 416, ],
          [81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 132, 135, 138, 141, 144,
           147, 150, 153, 156, 159, 418, 421, 424, 427, 430, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115,
           118, 121, 124, 127],
          [130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 419, 422, 425, 428, 431, 83, 86, 89, 92, 95, 98, 101,
           104, 107, 110, 113, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 417, 420, 423,
           426, 429, 432], [161, 164, 167, 170, 173, 176, 179, 182, 185, 188, 191, 194, 197, 200, 203, 206, 209, 212,
                            215, 218, 221, 224, 227, 230, 233, 236, 239, 434, 437, 440, 443, 446, 162, 165, 168, 171,
                            174, 177, 180, 183, 186, 189, 192, 195, 198, 201, 204, 207],
          [201, 213, 216, 219, 222, 225, 228, 231, 234, 237, 240, 435, 438, 441, 444, 447, 163, 166, 169, 172, 175, 178,
           181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 211, 214, 217, 220, 223, 226, 229, 232, 235, 238, 433, 436,
           439, 442, 445, 448],
          [141, 244, 247, 250, 253, 256, 259, 262, 265, 268, 271, 274, 277, 280, 283, 286, 289, 292, 295, 298, 301, 304,
           307, 310, 313, 316, 319, 450, 453, 456, 459, 462, 242, 245, 248, 251, 254, 257, 260,  263, 266, 269, 272,
           275, 278, 281, 284, 287],
          [290, 293, 296, 299, 302, 305, 308, 311, 314, 317, 320, 451, 454, 457, 460, 463, 243, 246, 249, 252, 255, 258,
           261, 264, 267, 270, 273, 276, 279, 282, 285, 288, 291, 194, 297, 300, 303, 306, 309, 312, 315, 318, 449, 452,
           455, 458, 461, 464],
          [321, 324, 327, 330, 333, 336, 339, 342, 345, 348, 351, 354, 357, 360, 363, 366, 369, 372, 375, 378, 381, 384,
           387, 390, 393, 396, 399, 466, 469, 472, 475, 478, 322, 325, 328, 331, 334, 337, 340, 343, 346, 349, 352, 355,
           358, 361, 364, 367],
          [370, 373, 376, 379, 382, 385, 388, 391, 394, 397, 400, 467, 470, 473, 476, 479, 323, 326, 329, 332, 335, 338,
           341, 344, 347, 350, 353, 356, 359, 362, 365, 368, 371, 374, 377, 380, 383, 386, 389, 392, 395, 398, 465, 468,
           471, 474, 477, 480])
#
# # ПЕРЕВОД ВЛОЖЕНЫХ СПИСКОВ В ОДИН ОБЩИЙ, для выявления повторов
# # all_dimer_numbers = []
# # for i in range(len(Sensor)):
# #     # print(Sensor[i])
# #     for q in range(len(Sensor[i])):
# #         all_dimer_numbers.append(Sensor[i][q])
#
# #  проверка на повторение каналов(создания списка дубликатов)
# # duplicate = []
# # for y in range(len(all_dimer_numbers)):
# #     x = all_dimer_numbers[0]
# #     del all_dimer_numbers[0]
# #     for r in range(len(all_dimer_numbers)):
# #         if x == all_dimer_numbers[r]:
# #             duplicate.append(x)
# # print(duplicate)
#
#
# Ввод номера
dimer_number = int(input('Ввод номера : '))
#
#
# Вывод локации введённого димерного номера.
for h in range(len(Sensor)):
    for k in range(len(Sensor[h])):
        if Sensor[h][k] == dimer_number:
            if (h+1) % 2 != 0 and 25 >= k + 1:
                print(((h + 1) // 2)+1, 'ШКАФ - его верхняя чаcть 1')
                print((k + 1), 'АВТОМАТ - считать сверху в низ')
                # print(((((h + 1) // 2) * 2) * 48) - (48 - (k+1)), 'из - (480шт.)')
                print(((((((h + 1) // 2) + 1) * 2) * 48) - ((48 * 2) - (k + 1))), 'из - (480шт.)')  # работате
            elif (h + 1) % 2 != 0 and 25 <= k + 1:
                print(((h + 1) // 2) + 1, 'ШКАФ - его верхняя чаcть 2')
                print(48 - k, 'АВТОМАТ - считать снизу в верх')
                print(((((((h + 1) // 2) + 1) * 2) * 48) - ((48 * 2) - (k + 1))), 'из - (480шт.)')  # работате






            elif (h+1) % 2 == 0 and 25 >= k + 1:
                print((h + 1) // 2, 'ШКАФ - его нижняя чаcть 3')
                print((k+1), 'АВТОМАТ - считать сверху в низ')
                # print(((((h + 1) // 2) * 2) * 48) - (48 - (k+1)), 'из - (480шт.)')
                print((96 * (h + 1) // 2) - (48 - k - 1), 'из - (480шт.)')  # работате

            elif (h+1) % 2 == 0 and 25 <= k + 1:
                print((h + 1) // 2, 'ШКАФ - его нижняя чаcть 4')
                print(48 - k, 'АВТОМАТ - считать сверху в низ')
                # print(((((h + 1) // 2) * 2) * 48) - (48 - (k+1)), 'из - (480шт.)')
                print(96 * ((h + 1) // 2) - (48 - k - 1), 'из - (480шт.)')  # работате




# print(h, k)